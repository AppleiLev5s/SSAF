-- not obfuscated. thank me later and made by ! $ ive seen sunlight#6040
-- loadstring(game:HttpGet('https://raw.githubusercontent.com/MRMANSCRIpt/SSAF/main/ChatBot'))()

getgenv().cdtime = 3; -- cooldown time
getgenv().cooldown = true;
getgenv().welcomeMsg = false;

getgenv().ScriptActive = true;
getgenv().walkto = false;

local gotoPlayer

	local players = game:GetService("Players")
	TextChatService = cloneref(game:GetService("TextChatService"))
    local messageDoneFiltering = chatEvents:WaitForChild("OnMessageDoneFiltering")

print("Made by ! $ ive seen sunlight#6040 (928754943064678481)")

if welcomeMsg then
	TextChatService.TextChannels.RBXGeneral:SendAsync("[v6.0] Meet "..tostring(game.Players.LocalPlayer.DisplayName).."! My commands are: !iq [user], !cooldown, !morse [text], !tp [user],","All")
	wait(0.1)
	TextChatService.TextChannels.RBXGeneral:SendAsync("!follow [plr], !stop, !accountage [username], !math, !cripple, !hello, !cmds/!help, !coinflip, !jump, !bring, !say [text] and !chat [text].","All")
end
local player = players:FindFirstChild(message.FromSpeaker)
    local message = message.Message or ""
	if ScriptActive == true and message:find("!",1,1) then
        if player and message == "!hello" then
			print(player)
			TextChatService.TextChannels.RBXGeneral:SendAsync("Hello, "..tostring(game.Players:FindFirstChild(tostring(player)).DisplayName)..". This is a test message","All")
        elseif player and message:find("!iq") then
			if message:find("My commands are") then
				print("Prevented")
			elseif message:find("!iq ") then
				TextChatService.TextChannels.RBXGeneral:SendAsync(message:gsub("!iq ","").."'s IQ is "..math.random(70,190),"All")
			else
			TextChatService.TextChannels.RBXGeneral:SendAsync(tostring(game.Players:FindFirstChild(tostring(player)).DisplayName).."'s IQ is "..math.random(70,190),"All")
			end
		elseif player and message:find("!say ") then

			TextChatService.TextChannels.RBXGeneral:SendAsync(message:gsub("!say ",""),"All")

		elseif player and message == "!cripple" then
			game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
			game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit = true
			wait(2)
			game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
			game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit = false
		elseif player and message:find("!chat") then
			local Split1 = message:gsub("!chat ","")
			local Split = Split1:gsub(" ","+")
			if message:find("#") then
TextChatService.TextChannels.RBXGeneral:SendAsync("tags lol (not ai generated)","All")
			else
			local HttpService = game:GetService("HttpService")
			local Data = game:HttpGet('http://api.brainshop.ai/get?bid=169062&key=JxGYLvYneFFxKdnf&uid=1&msg='..Split)
			local req = HttpService:JSONDecode(Data)
			print(Split)
			print(req.cnt)
			if #req.cnt < 160 then
				TextChatService.TextChannels.RBXGeneral:SendAsync(req.cnt,"All")
			else
				TextChatService.TextChannels.RBXGeneral:SendAsync("Failed to reply (answer too long)","All")
			end
			end
		elseif player and message == "!cmds" or message == "!help" then
		TextChatService.TextChannels.RBXGeneral:SendAsync("My commands are: !iq [user], !cooldown, !morse [text], !tp [user],","All")
	wait(0.1)
	TextChatService.TextChannels.RBXGeneral:SendAsync("!follow [plr], !stop, !accountage [username], !math, !cripple, !hello, !cmds/!help, !coinflip, !jump, !bring, !say [text] and !chat [text].","All")
		elseif player and message == "!jump" then
			game.Players.LocalPlayer.Character.Humanoid.Jump = true
		elseif player and message == "!coinflip" then
			local g = math.random(1,2)
			if g == 1 then
				print("It landed on Tails.")
				TextChatService.TextChannels.RBXGeneral:SendAsync("It landed on Tails.","All")
			elseif g == 2 then
				print("It landed on Heads.")
				TextChatService.TextChannels.RBXGeneral:SendAsync("It landed on Heads.","All")
			end
		elseif player and message:find("!accountage ") then
			local Msg = message:gsub("!accountage ","")
				local plrid = game:GetService("Players"):GetUserIdFromNameAsync(Msg)

local response = request(
			{
				Url = "https://users.roblox.com/v1/users/"..tostring(plrid),  -- This website helps debug HTTP requests
				Method = "GET",
				Headers = {
					["Content-Type"] = "application/json"  -- When sending JSON, set this!
				}
			}
		)
		local d = game:GetService("HttpService"):JSONDecode(response.Body)
		print(d.created)
local createdTime = DateTime.fromIsoDate(tostring(d.created)).UnixTimestamp
local currentTime = DateTime.now().UnixTimestamp

local accountAgeDays = (currentTime - createdTime)/86400
print(math.floor(accountAgeDays))
TextChatService.TextChannels.RBXGeneral:SendAsync(Msg.."'s account is "..math.floor(accountAgeDays).." days old","All")
		elseif player and message:find("!cooldown") then
			if cooldown == true then
				TextChatService.TextChannels.RBXGeneral:SendAsync("Cooldown time is "..cdtime.." seconds.","All")
			elseif cooldown == false then
				TextChatService.TextChannels.RBXGeneral:SendAsync("Cooldown is not active.","All")
			end
		elseif player and message:find("!follow ") then
			if message:gsub("!follow ","") == tostring(game.Players.LocalPlayer.DisplayName) or message:gsub("!follow ","") == tostring(game.Players.LocalPlayer.Name) then
				TextChatService.TextChannels.RBXGeneral:SendAsync("yeah no","All")
			else
			walkto = false
			wait(0.5)
			walkto = true
			gotoPlayer = tostring(player)
			local msg = message:gsub("!follow ","")
			local plr
			for i,v in pairs(game.Players:GetChildren()) do
				if v.DisplayName == msg or v.Name == msg then
					plr = tostring(v.Name)
				end
			end
			task.spawn(function()
			while walkto and wait() do
			game.Players.LocalPlayer.Character.Humanoid:MoveTo(game.Workspace:FindFirstChild(plr).HumanoidRootPart.CFrame*Vector3.new(0,0,3))
			end
			end)
		end
		elseif player and message == "!stop" then
			print(gotoPlayer)
			if tostring(player) == tostring(gotoPlayer) or tostring(player) == tostring(game.Players.LocalPlayer.Name) then
				walkto = false
			else
				TextChatService.TextChannels.RBXGeneral:SendAsync("Only the GoTo player can do that.","All")
			end
		elseif player and message:find("!morse ") then
			local split = message:gsub("!morse ","")
			local split2 = split:gsub(" ","+")
			print(split2)
						local rep = request({
				Url = "https://api.funtranslations.com/translate/morse.json?text="..game:GetService"HttpService":UrlEncode(split2),
				Method = "GET",
				Headers = {
					["Content-Type"] = "application/json"  -- When sending JSON, set this!
				},
			})
			local morsetxt
			for i,v in pairs(rep) do
				if type(v) == "string" then
					print(v)
					local req = game.HttpService:JSONDecode(rep.Body)
					morsetxt = req.contents.translated
				end
			end
			TextChatService.TextChannels.RBXGeneral:SendAsync(morsetxt,"All")
		elseif player and message:find("!math ") then
			local split2 = message:gsub("!math ","")
			local split = split2:gsub("%a","")
			print(split)
			local g = loadstring("return "..split)()
			print(g)
			if g == nil then
				TextChatService.TextChannels.RBXGeneral:SendAsync("❌ Incorrect parameters","All")
			else
			TextChatService.TextChannels.RBXGeneral:SendAsync(""..tostring(g),"All")
			end
		elseif player and message:find("!tp ") then
			local spl = message:gsub("!tp ","")
for i,v in pairs(game.Players:GetChildren()) do
    if v.DisplayName == spl or v.Name == spl then
    if v and v.Character then local sc = v.Character
        local sch = sc.HumanoidRootPart
        local lph = game.Players.LocalPlayer.Character.HumanoidRootPart
        local TweenService = game:GetService("TweenService")

local part = lph

local tweenInfo = TweenInfo.new(
    1, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut, -- EasingDirection
    0, -- RepeatCount (when less than zero the tween will loop indefinitely)
    false, -- Reverses (tween will reverse once reaching it's goal)
    0 -- DelayTime
)

local tween = TweenService:Create(part, tweenInfo, { CFrame = sch.CFrame })

tween:Play()
    end
end
end
		elseif player and message == "!bring" then
			print(message)
			local part = game.Players.LocalPlayer.Character.HumanoidRootPart

local tweenInfo = TweenInfo.new(
    1, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut, -- EasingDirection
    0, -- RepeatCount (when less than zero the tween will loop indefinitely)
    false, -- Reverses (tween will reverse once reaching it's goal)
    0 -- DelayTime
)

local tween = game:GetService("TweenService"):Create(part, tweenInfo, { CFrame = game.Workspace:FindFirstChild(tostring(player)).HumanoidRootPart.CFrame })
tween:Play()
		end
				if cooldown then
		ScriptActive = false
		wait(cdtime)
		ScriptActive = true
				end
		end
		end)
